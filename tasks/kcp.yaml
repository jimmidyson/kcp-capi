# Copyright 2025 Nutanix. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

version: '3'

tasks:
  deploy:
    desc: Deploy KCP
    cmds:
      - task: deploy-kcp
      - task: generate-kcp-admin-kubeconfig

  deploy-kcp:
    internal: true
    cmds:
      - helm upgrade --install kcp kcp --repo=https://kcp-dev.github.io/helm-charts
          --version=0.12.3
          --namespace=kcp-system --create-namespace
          --values=config/kcp-values.yaml
          --wait --wait-for-jobs
          --hide-notes
    sources:
      - config/kcp-values.yaml
    status:
      - "helm status --namespace=kcp-system kcp | grep --quiet '^STATUS: deployed$'"

  generate-kcp-admin-kubeconfig:
    desc: Generate KCP admin kubeconfig
    vars:
      KCP_KUBECONFIG_TEMP_DIR:
        sh: mktemp -d .kcp-kubeconfig.XXXXXX
    cmds:
      - defer: rm -rf "{{.KCP_KUBECONFIG_TEMP_DIR}}"
      - kubectl get secrets --namespace=kcp-system kcp-external-admin-kubeconfig -ojson |
          jq --raw-output '.data.kubeconfig | @base64d' >"{{.KCP_KUBECONFIG_TEMP_DIR}}/${KCP_ADMIN_EXTERNAL_KUBECONFIG}"
      - kubectl get secrets -n kcp-system kcp-ca -ojson |
          jq --raw-output '.data["tls.crt"] | @base64d' >"{{.KCP_KUBECONFIG_TEMP_DIR}}/ca.crt"
      - kubectl --kubeconfig="{{.KCP_KUBECONFIG_TEMP_DIR}}/${KCP_ADMIN_EXTERNAL_KUBECONFIG}" config set-credentials
          external-logical-cluster-admin
          --token=admin-token
      - sed -i '/client-\(certificate\|key\)/d' "{{.KCP_KUBECONFIG_TEMP_DIR}}/${KCP_ADMIN_EXTERNAL_KUBECONFIG}"
      - kubectl --kubeconfig="{{.KCP_KUBECONFIG_TEMP_DIR}}/${KCP_ADMIN_EXTERNAL_KUBECONFIG}" config set-cluster
          external-logical-cluster-admin
          --certificate-authority="{{.KCP_KUBECONFIG_TEMP_DIR}}/ca.crt"
          --server="https://kcp.127.0.0.1.sslip.io:8443/clusters/root"
          --embed-certs=true
      - mv "{{.KCP_KUBECONFIG_TEMP_DIR}}/${KCP_ADMIN_EXTERNAL_KUBECONFIG}" "${KCP_ADMIN_EXTERNAL_KUBECONFIG}"
    sources:
      - config/kcp-values.yaml
    generates:
      - kcp-admin.kubeconfig
    preconditions:
      - "helm status --namespace=kcp-system kcp | grep --quiet '^STATUS: deployed$'"

  create-workspace:
    desc: Create workspace
    env:
      KUBECONFIG:
        sh: echo "${KCP_ADMIN_EXTERNAL_KUBECONFIG}"
    cmds:
      - kubectl ws :root
      - defer: kubectl ws :root
      - kubectl create workspace {{.WORKSPACE}}
    status:
      - kubectl ws :root && kubectl get workspaces {{.WORKSPACE}} &>/dev/null
